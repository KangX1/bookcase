#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2011 OpenFOAM Foundation
#    \\/     M anipulation  |
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     foamNewFunctionObject
#
# Description
#     Create new standard OpenFOAM source file structure for a custom 
#     function object.
#
#------------------------------------------------------------------------------
Script=${0##*/}
Template="$WM_PROJECT_DIR/etc/codeTemplates/dynamicCode/functionObjectTemplate"

usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat << USAGE
Usage: $Script [OPTION] <functionObjectType>
options:
  -help             print the usage

* create new standard OpenFOAM source file structure for a function object 
  functionObjectType

USAGE
    exit 1
}

className="$1"

case "$1" in
(-h | -help)
    usage
    ;;
(*)

    # Create the function object files. 

    functionObject=FunctionObject

    echo className = $className

    name="$className$functionObject"

    for ext in .C .H; do 

        fileName=$name$ext

        echo name = $name$ext

        echo "$Script: Creating new file $fileName"

        if [ -e "$fileName" ]
        then
            echo "   Error: file exists"
            exit 1
        fi

        echo $Template$ext

        # process class name
        sed "s/CLASSNAME/$className/g" $Template$ext > $fileName

    done

    # Instantiate the OutputFilter template

    # If Make files/options don't exist, create Make file/options with the 
    # library name same as the name of the function object.

    # Else prepend files to Make/files

        #if [ "$subType" = App -a ! -d Make ]
        #then
            #wmakeFilesAndOptions
        #fi

    ;;
esac

[ "$#" -eq 2 ] "wrong number of arguments"
shift 2

#if [ "${printOpt:-false}" = true ]
#then
    #cat $Template$subType$Type
#else

    #fileName="$className$Type"

    #echo "$Script: Creating new interface file $fileName"
    #if [ -e "$fileName" ]
    #then
        #echo "   Error: file exists"
        #exit 1
    #fi

    ## process class name
    #sed "s/CLASSNAME/$className/g" $Template$subType$Type > $fileName

    #if [ "$subType" = App -a ! -d Make ]
    #then
        #wmakeFilesAndOptions
    #fi
#fi

#------------------------------------------------------------------------------
